# Problem 8
# The four adjacent digits in the following 1000-digit number that have the greatest product are 9 X 9 X 8 X 9  = 5832
# 7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615
# 6078911294949545950173795833195285320880551112540698747158523863050715693290963295227443043557668966489504
# 4524452316173185640309871112172238311362229893423380308135336276614282806444486645238749303589072962904915
# 6044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202
# 3542180975125454059475224352584907711670556013604839586446706324415722155397536978179778461740649551492908
# 6256932197846862248283972241375657056057490261407972968652414535100474821663704844031998900088952434506585
# 4122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426
# 0769004224219022671055626321111109370544217506941658960408071984038509624554443629812309878799272442849091
# 8884580156166097919133875499200524063689912560717606058861164671094050775410022569831552000559357297257163
# 6269561882670428252483600823257530420752963450
# Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?

def largest_product(n, k):
    curr_product = 1
    zeros = 0
    for i in range(0,k):
        curr_product *= int(n[i])
    
    largest_product = curr_product
    i = 0
    for j in range(k,len(n)):
        if int(n[i]) == 0:
            zeros -= 1
        else:
            curr_product /= int(n[i])
        if int(n[j]) == 0:
            zeros += 1
        else:
            curr_product *= int(n[j])
        if curr_product > largest_product and zeros == 0:
            largest_product = curr_product
        i += 1
    return largest_product

input_string = "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450"
print(largest_product(input_string, 13))